<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
	 
    <!-- 开启注解配置 -->  
    <context:annotation-config />

    <!-- 可通过注解控制事务 -->
	<tx:annotation-driven />
     
	<!-- 定义扫描的包 -->
	<context:component-scan base-package="com.cx.service" />
	<context:component-scan base-package="com.cx.service.impl" />
	<context:component-scan base-package="com.cx.dao" />
	<context:component-scan base-package="com.cx.utils" />

	
	<!-- 读取JDBC配置文件 -->
	<context:property-placeholder location="classpath*:jdbc.properties" ignore-unresolvable="true" />
	
	<!--创建jdbc数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- useUnicode=true&characterEncoding=utf8 添加这个可以保证中文不乱吗  -->
		<property name="url" value="${jdbc.url}" /> 
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
	</bean>
	
	<!-- Session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 指定Mapper文件的路径  -->
		<property name="mapperLocations" value="classpath*:mappings/**/*Mapper.xml" />
		<!-- 设置pageHelper拦截器 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							<!-- 设置数据库链接让pagehelper选择分页方式 -->
							helperDialect=mariadb
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- 自动扫描mappar-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cx.dao"/>
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<import resource="classpath:redis/**/redis-config.xml" />

	<!-- 下面是配置声明式事务管理的 -->
	<!--<bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
		<!--<property name="dataSource" ref="dataSource" />-->
	<!--</bean>-->
	
	<!-- 配置事务的级别和隔离机制 -->
	<!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
		<!--<tx:attributes>-->
			<!--<tx:method name="get*" read-only="true"/>-->
			<!--<tx:method name="query*" read-only="true"/>-->
			<!--<tx:method name="find*" read-only="true"/>-->
			<!--<tx:method name="load*" read-only="true"/>-->
            <!--<tx:method name="update*" rollback-for="Throwable" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" rollback-for="Throwable" propagation="REQUIRED"/>-->
            <!--<tx:method name="create*" rollback-for="Throwable" propagation="REQUIRED"/>-->
			<!--<tx:method name="add*" rollback-for="Throwable"  propagation="REQUIRED"/>-->
			<!--<tx:method name="cancel*" rollback-for="Throwable"  propagation="REQUIRED"/>-->
			<!--<tx:method name="doAccounts" rollback-for="Throwable"  propagation="REQUIRED"/>-->
			<!--<tx:method name="check*" rollback-for="Throwable"  propagation="REQUIRED"/>-->
            <!--<tx:method name="*" rollback-for="Exception"/>-->
        <!--</tx:attributes>-->
	<!--</tx:advice>-->

	<!--谷歌验证码组件-->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<!--是否有边框-->
						<prop key="kaptcha.border">yes</prop>
						<!--设置边框颜色-->
						<prop key="kaptcha.border.color">105,179,90</prop>
						<!--设置验证码宽度-->
						<prop key="kaptcha.image.width">160</prop>
						<!--设置验证码高度-->
						<prop key="kaptcha.image.height">50</prop>
						<!--Session key-->
						<prop key="kaptcha.session.key">code</prop>
						<!--字体颜色-->
						<prop key="kaptcha.textproducer.font.color">blue</prop>
						<!--字体大小-->
						<prop key="kaptcha.textproducer.font.size">35</prop>
						<!--文字间隔-->
						<prop key="kaptcha.textproducer.char.space">3</prop>
						<!--验证码长度-->
						<prop key="kaptcha.textproducer.char.length">6</prop>
						<!-- 配置中文 <prop key="kaptcha.textproducer.impl">com.google.code.kaptcha.text.impl.ChineseTextProducer</prop> -->
						<!--字体-->
						<prop key="kaptcha.textproducer.font.names">彩云,宋体,楷体,微软雅黑</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!--shiro配置-->
	<bean id="myRealm" class="com.cx.shiro.UserInfoRealm"/>
	<!--配置密码匹配器
       <property name="credentialsMatcher">
           <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
               &lt;!&ndash; 加密算法为MD5 &ndash;&gt;
               <property name="hashAlgorithmName" value="MD5"></property>
               &lt;!&ndash; 加密次数 &ndash;&gt;
               <property name="hashIterations" value="1"></property>
           </bean>
       </property>-->
	<!--</bean>-->
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--<property name="authenticator" ref="authenticator"></property>
        <property name="rememberMeManager" ref="rememberMeManager"/>-->
		<property name="realm" ref="myRealm"></property>
		<!-- 可以配置多个Realm，其实会把realms属性赋值给ModularRealmAuthenticator的realms属性 -->
	</bean>

	<!--<bean id="AdminRealm" class="com.lhl.Realms.AdminRealm">
        &lt;!&ndash;配置密码匹配器&ndash;&gt;
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                &lt;!&ndash; 加密算法为MD5 &ndash;&gt;
                <property name="hashAlgorithmName" value="MD5"></property>
                &lt;!&ndash; 加密次数 &ndash;&gt;
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>-->

	<!-- 配置使用自定义认证器，可以实现多Realm认证 -->
	<!--<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy" >
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
        <property name="realms">
            <list>
                <ref bean="AdminRealm"/>
                <ref bean="myRealm" />
            </list>
        </property>
    </bean>-->

	<!--4.配置 LifecycleBeanPostProcessor，可以自动的调用配置在spring IOC容器中Shiro bean的声明周期方法 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!--配置 LifecycleBeanPostProcessor，可以自动的调用配置在spring IOC容器中Shiro bean的声明周期方法-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>

	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	<!-- 远程调用，暂时不需要 -->
	<!--<bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>-->

	<!-- Shiro过滤器核心-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 身份认证失败，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="/user/unlogin"/>
		<!-- 配置登录成功后的页面 -->
		<property name="successUrl" value="/user/success" />
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/user/angu"/>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- anon表示匿名访问，不需要认证以及授权 authc表示需要认证-->
				/api/pc/user/login=anon
				/api/pc/user/getSMSCode=anon
				/api/pc/user/userRegister=anon
				/api/pc/user/userForgetPwd=anon
				/api/pc/user/getPictureCode=anon
				/api/pc/user/pictureCodeCompare=anon
				/api/pc/user/updatePassWord=anon
				/api/pc/company/addCompany=anon
				/**=authc
				<!--/api/pc/user/logout=logout-->
				<!--/api/pc/user/test2=roles["企业高级会员"]-->
				<!--/user/perm=perms["企业初级:*"]-->
			</value>
		</property>
	</bean>

	<!-- remenberMe配置 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<!-- 默认记住7天（单位：秒） -->
		<property name="maxAge" value="604800" />
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />-->
		<property name="cookie" ref="rememberMeCookie" />
	</bean>


</beans>
